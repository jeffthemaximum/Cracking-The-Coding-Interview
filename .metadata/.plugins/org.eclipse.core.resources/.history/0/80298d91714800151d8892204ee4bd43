/*
 * Implement an algorithm to find the kth to last element of a singly linked list.
 */

package two_one;

import two_examples.Node;

public class Nodey {
	Nodey next = null;
	int data;
	
	public Nodey(int d){
		data = d;
	}
	
	void appendToAll(int d){
		Nodey end = new Nodey(d);
		Nodey n = this;
		while (n.next != null) {
			n = n.next;
		}
		n.next = end;
	}
	
	static Nodey deleteNode(Nodey head, int d){
		Nodey n = head;
		
		if (n.data == d) {
			return head.next;
		}
		
		while (n.next != null) {
			if (n.next.data == d) {
				n.next = n.next.next;
				return head;
			}
			n = n.next;
		}
		return head;
	}
		
	void printList() {
		Nodey n = this;
		while (n.next != null){
			System.out.println(n.data);
			n = n.next;
		}
		System.out.println(n.data);
	}
	
	Nodey deleteNodeAtK(int k) {
		Nodey n = this;
		int counter = 1;
		while (n.next != null) {
			n = n.next;
			counter++;
		}
		int index = counter - k;
		System.out.println(counter);
		int stop = 1;
		while (true) {
			if (stop == index) {
				return deleteNode(n, n.data);
			}
			n = n.next;
		}
		return n;
	}
	
	public static void main(String[] args){
		Nodey head = new Nodey(5);
		head.appendToAll(1);
		head.appendToAll(7);
		head.appendToAll(3);
		head.appendToAll(7);
		head.appendToAll(4);
		head.appendToAll(3);
		head.deleteNodeAtK(3);
	}
}
